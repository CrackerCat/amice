name: Linux X64 Build

on:
  push:
    branches: [ master ]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/build.rs'
      - 'rust-toolchain*'
  pull_request:
    branches: [ master ]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/build.rs'
      - 'rust-toolchain*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  linux-build:
    name: "LLVM/OPT ${{ matrix.llvm-version[0] }} Linux"
    runs-on: ubuntu-latest
    env:
      BUILD_OUTPUT_PATH: target/release
    strategy:
      fail-fast: false
      matrix:
        # [<major>, <feature-suffix>, <llvm-sys env suffix>]
        llvm-version:
          - ["12", "12-0", "120"]
          - ["13", "13-0", "130"]
          - ["14", "14-0", "140"]
          - ["15", "15-0", "150"]
          - ["16", "16-0", "160"]
          - ["17", "17-0", "170"]
          - ["18", "18-1", "181"]
          - ["19", "19-1", "191"]
          - ["20", "20-1", "201"]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Cache Rust Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-llvm${{ matrix.llvm-version[0] }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-llvm${{ matrix.llvm-version[0] }}-
            ${{ runner.os }}-cargo-

      - name: Setup Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Add LLVM APT Repository
        run: |
          set -euxo pipefail
          export DEBIAN_FRONTEND=noninteractive
          
          # Update package list
          sudo apt-get update
          
          # Install prerequisites
          sudo apt-get install -y wget software-properties-common gnupg
          
          # Add LLVM repository
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          
          # Get distribution codename
          distro=$(lsb_release -cs)
          echo "Distribution: $distro"
          
          # Add repository
          echo "deb http://apt.llvm.org/$distro/ llvm-toolchain-$distro-${{ matrix.llvm-version[0] }} main" | \
            sudo tee /etc/apt/sources.list.d/llvm.list
          
          sudo apt-get update

      - name: Install LLVM/Clang ${{ matrix.llvm-version[0] }}
        run: |
          set -euxo pipefail
          ver=${{ matrix.llvm-version[0] }}
          sudo apt-get install -y "llvm-${ver}" "clang-${ver}" "lld-${ver}"
          prefix="/usr/lib/llvm-${ver}"
          echo "Using LLVM prefix: ${prefix}"

          env_name="LLVM_SYS_${{ matrix.llvm-version[2] }}_PREFIX"
          echo "${env_name}=${prefix}" >> "$GITHUB_ENV"

          echo "PATH=${prefix}/bin:$PATH" >> "$GITHUB_ENV"
          echo "CC=clang" >> "$GITHUB_ENV"
          echo "CXX=clang++" >> "$GITHUB_ENV"

          "${prefix}/bin/llvm-config" --version
          "${prefix}/bin/clang" --version

      - name: Build libamice.so (Release)
        run: |
          set -euxo pipefail
          cargo build --release --no-default-features --features llvm${{ matrix.llvm-version[1] }}
          
          # Verify the built library exists
          if [ ! -f "${{ env.BUILD_OUTPUT_PATH }}/libamice.so" ]; then
            echo "Error: libamice.so not found in expected location"
            ls -la ${{ env.BUILD_OUTPUT_PATH }}/
            exit 1
          fi
          
          # Show library info
          file "${{ env.BUILD_OUTPUT_PATH }}/libamice.so"
          ldd "${{ env.BUILD_OUTPUT_PATH }}/libamice.so" || true

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libamice-llvm${{ matrix.llvm-version[0] }}-linux-x64
          path: ${{ env.BUILD_OUTPUT_PATH }}/libamice.so
          retention-days: 30
          if-no-files-found: error
